// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package crud_sqlc

import (
	"context"
	"database/sql"
)

const createGood = `-- name: CreateGood :one
INSERT INTO goods (
  project_id,
  name,
  priority
) VALUES (
  $1, $2, (SELECT COALESCE(MAX(priority)+1, 1) FROM goods)
)
RETURNING id, project_id, name, description, priority, removed, created_at
`

type CreateGoodParams struct {
	ProjectID int32  `json:"project_id"`
	Name      string `json:"name"`
}

func (q *Queries) CreateGood(ctx context.Context, arg CreateGoodParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, createGood, arg.ProjectID, arg.Name)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, name)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteGood = `-- name: DeleteGood :one
DELETE FROM goods
WHERE id = $1
RETURNING id, project_id, name, description, priority, removed, created_at
`

func (q *Queries) DeleteGood(ctx context.Context, id int32) (Good, error) {
	row := q.db.QueryRowContext(ctx, deleteGood, id)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects
WHERE id = $1
RETURNING id, name, created_at
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, deleteProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const readGood = `-- name: ReadGood :one
SELECT id, project_id, name, description, priority, removed, created_at FROM goods
WHERE id = $1
`

func (q *Queries) ReadGood(ctx context.Context, id int32) (Good, error) {
	row := q.db.QueryRowContext(ctx, readGood, id)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const readProject = `-- name: ReadProject :one
SELECT id, name, created_at FROM projects
WHERE id = $1
`

func (q *Queries) ReadProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, readProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const updateGoodsDescription = `-- name: UpdateGoodsDescription :one
UPDATE goods
  set description = $2
WHERE id = $1
RETURNING id, project_id, name, description, priority, removed, created_at
`

type UpdateGoodsDescriptionParams struct {
	ID          int32          `json:"id"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateGoodsDescription(ctx context.Context, arg UpdateGoodsDescriptionParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, updateGoodsDescription, arg.ID, arg.Description)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const updateGoodsName = `-- name: UpdateGoodsName :one
UPDATE goods
  set name = $2
WHERE id = $1
RETURNING id, project_id, name, description, priority, removed, created_at
`

type UpdateGoodsNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateGoodsName(ctx context.Context, arg UpdateGoodsNameParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, updateGoodsName, arg.ID, arg.Name)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const updateGoodsPriority = `-- name: UpdateGoodsPriority :one
UPDATE goods
  set priority = $2
WHERE id = $1
RETURNING id, project_id, name, description, priority, removed, created_at
`

type UpdateGoodsPriorityParams struct {
	ID       int32 `json:"id"`
	Priority int32 `json:"priority"`
}

func (q *Queries) UpdateGoodsPriority(ctx context.Context, arg UpdateGoodsPriorityParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, updateGoodsPriority, arg.ID, arg.Priority)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const updateGoodsRemoved = `-- name: UpdateGoodsRemoved :one
UPDATE goods
  set removed = $2
WHERE id = $1
RETURNING id, project_id, name, description, priority, removed, created_at
`

type UpdateGoodsRemovedParams struct {
	ID      int32 `json:"id"`
	Removed bool  `json:"removed"`
}

func (q *Queries) UpdateGoodsRemoved(ctx context.Context, arg UpdateGoodsRemovedParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, updateGoodsRemoved, arg.ID, arg.Removed)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Name,
		&i.Description,
		&i.Priority,
		&i.Removed,
		&i.CreatedAt,
	)
	return i, err
}

const updateProjectsName = `-- name: UpdateProjectsName :one
UPDATE projects
  set name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateProjectsNameParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateProjectsName(ctx context.Context, arg UpdateProjectsNameParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProjectsName, arg.ID, arg.Name)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
